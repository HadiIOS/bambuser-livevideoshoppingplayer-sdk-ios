// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name BambuserLiveVideoShoppingPlayer
import AVFoundation
@_exported import BambuserLiveVideoShoppingPlayer

import Combine
import EventKit
import Foundation
import Swift
import SwiftUI
import UIKit
import WebKit
extension PlayerConfiguration {
  public struct ButtonConfiguration : Swift.Codable {
    public init(checkout: BambuserLiveVideoShoppingPlayer.PlayerConfiguration.ButtonConfiguration.LinkConfig = .auto, dismiss: BambuserLiveVideoShoppingPlayer.PlayerConfiguration.ButtonConfiguration.DismissConfig = .none, product: BambuserLiveVideoShoppingPlayer.PlayerConfiguration.ButtonConfiguration.LinkConfig = .auto)
    public let checkout: BambuserLiveVideoShoppingPlayer.PlayerConfiguration.ButtonConfiguration.LinkConfig
    public let dismiss: BambuserLiveVideoShoppingPlayer.PlayerConfiguration.ButtonConfiguration.DismissConfig
    public let product: BambuserLiveVideoShoppingPlayer.PlayerConfiguration.ButtonConfiguration.LinkConfig
    public enum DismissConfig : Swift.String, Swift.CaseIterable, Swift.Codable {
      case auto, close, minimize, none
      public init?(rawValue: Swift.String)
      public typealias AllCases = [BambuserLiveVideoShoppingPlayer.PlayerConfiguration.ButtonConfiguration.DismissConfig]
      public typealias RawValue = Swift.String
      public static var allCases: [BambuserLiveVideoShoppingPlayer.PlayerConfiguration.ButtonConfiguration.DismissConfig] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    public enum LinkConfig : Swift.String, Swift.CaseIterable, Swift.Codable {
      case auto, inline, link, none
      public init?(rawValue: Swift.String)
      public typealias AllCases = [BambuserLiveVideoShoppingPlayer.PlayerConfiguration.ButtonConfiguration.LinkConfig]
      public typealias RawValue = Swift.String
      public static var allCases: [BambuserLiveVideoShoppingPlayer.PlayerConfiguration.ButtonConfiguration.LinkConfig] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
extension PlayerConfiguration.ButtonConfiguration {
  public static var standard: BambuserLiveVideoShoppingPlayer.PlayerConfiguration.ButtonConfiguration {
    get
  }
}
public struct PlayerEventInfo {
  public init(player: BambuserLiveVideoShoppingPlayer.LiveVideoShoppingPlayerInterface, event: BambuserLiveVideoShoppingPlayer.PlayerEvent, data: [Swift.String : Any] = [:])
  public typealias Data = [Swift.String : Any]
  public static var aboutBlank: Swift.String
  public static var showIdPlaceholder: Swift.String
  public let player: BambuserLiveVideoShoppingPlayer.LiveVideoShoppingPlayerInterface
  public let event: BambuserLiveVideoShoppingPlayer.PlayerEvent
  public let data: BambuserLiveVideoShoppingPlayer.PlayerEventInfo.Data
}
extension PlayerEventInfo {
  public func url(for key: BambuserLiveVideoShoppingPlayer.PlayerEventInfo.Key) -> Foundation.URL?
  public func value(for key: BambuserLiveVideoShoppingPlayer.PlayerEventInfo.Key) -> Any?
  public func value<Value>(for key: BambuserLiveVideoShoppingPlayer.PlayerEventInfo.Key) -> Value?
}
extension PlayerEventInfo {
  public enum Key {
    case duration
    case id
    case start
    case title
    case url
    case key(Swift.String)
  }
}
extension PlayerConfiguration {
  public struct StreamerInfo {
    public init(name: Swift.String? = nil, avatar: Swift.String? = nil)
    public let name: Swift.String?
    public let avatar: Swift.String?
  }
}
extension PlayerConfiguration.StreamerInfo {
  public static var standard: BambuserLiveVideoShoppingPlayer.PlayerConfiguration.StreamerInfo {
    get
  }
}
public struct CalendarEvent {
  public init(title: Swift.String, startDate: Foundation.Date, endDate: Foundation.Date, url: Foundation.URL)
  public let title: Swift.String
  public let startDate: Foundation.Date
  public let endDate: Foundation.Date
  public let url: Foundation.URL
  public typealias AddToCalendarCompletion = (BambuserLiveVideoShoppingPlayer.CalendarEvent.AddToCalendarResult) -> Swift.Void
  public typealias AddToCalendarResult = Swift.Result<Swift.Void, BambuserLiveVideoShoppingPlayer.CalendarEvent.AddToCalendarError>
  public typealias CalendarPicker = (EventKit.EKEventStore) -> EventKit.EKCalendar?
  public typealias StorePicker = () -> EventKit.EKEventStore
  public enum AddToCalendarError : Swift.Error {
    case calendarAccessNotGranted
    case defaultCalendarNotFound
    case error(Swift.Error)
    case missingEventData
  }
  public func saveToCalendar(_ calendar: @escaping BambuserLiveVideoShoppingPlayer.CalendarEvent.CalendarPicker = { $0.defaultCalendarForNewEvents }, in store: @escaping BambuserLiveVideoShoppingPlayer.CalendarEvent.StorePicker = { EKEventStore() }, completion: @escaping BambuserLiveVideoShoppingPlayer.CalendarEvent.AddToCalendarCompletion)
}
public protocol PictureInPictureController {
  var isPictureInPictureActive: Swift.Bool { get }
  func enterPictureInPicture()
  func exitPictureInPicture()
}
extension PictureInPictureController {
  public func togglePictureInPicture()
}
public enum PlayerState : Swift.String, Swift.CaseIterable, Swift.Codable {
  case idle
  case loaded
  case ready
  case closed
  public init?(rawValue: Swift.String)
  public typealias AllCases = [BambuserLiveVideoShoppingPlayer.PlayerState]
  public typealias RawValue = Swift.String
  public static var allCases: [BambuserLiveVideoShoppingPlayer.PlayerState] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension PlayerConfiguration {
  public struct LocaleInfo {
    public init(locale: Swift.String? = nil, currency: Swift.String? = nil, trimPriceTrailingZeros: Swift.Bool = false)
    public let currency: Swift.String?
    public let locale: Swift.String?
    public let trimPriceTrailingZeros: Swift.Bool
  }
}
extension PlayerConfiguration.LocaleInfo {
  public static var standard: BambuserLiveVideoShoppingPlayer.PlayerConfiguration.LocaleInfo {
    get
  }
}
public class LiveVideoShoppingPlayerContext : Combine.ObservableObject {
  public init()
  public static let shared: BambuserLiveVideoShoppingPlayer.LiveVideoShoppingPlayerContext
  public var interface: BambuserLiveVideoShoppingPlayer.LiveVideoShoppingPlayerInterface? {
    get
  }
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public protocol LiveVideoShoppingPlayerInterface : BambuserLiveVideoShoppingPlayer.PictureInPictureController, BambuserLiveVideoShoppingPlayer.PlayerUIPresenter, BambuserLiveVideoShoppingPlayer.ShowPresenter {
  var configuration: BambuserLiveVideoShoppingPlayer.PlayerConfiguration { get }
}
extension PlayerEventInfo {
  public var calendarDateFormat: Swift.String {
    get
  }
  public var calendarDateFormatter: Foundation.DateFormatter {
    get
  }
  public var calendarEvent: BambuserLiveVideoShoppingPlayer.CalendarEvent? {
    get
  }
}
public class AudioSessionConfiguration {
  public init(configuration: @escaping BambuserLiveVideoShoppingPlayer.AudioSessionConfiguration.Configuration)
  public typealias Configuration = (AVFAudio.AVAudioSession) -> Swift.Void
  final public let configuration: BambuserLiveVideoShoppingPlayer.AudioSessionConfiguration.Configuration
  @objc deinit
}
extension AudioSessionConfiguration {
  public static var standard: BambuserLiveVideoShoppingPlayer.AudioSessionConfiguration {
    get
  }
}
public struct LiveVideoShoppingPlayer : SwiftUI.View {
  public init(showId: Swift.String, configuration: BambuserLiveVideoShoppingPlayer.PlayerConfiguration, context: BambuserLiveVideoShoppingPlayer.LiveVideoShoppingPlayerContext = .shared)
  public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s31BambuserLiveVideoShoppingPlayer0bcdE0V4bodyQrvp", 0) ðŸ¦¸
}
public enum PlayerEvent : Swift.String, Swift.CaseIterable, Swift.Codable {
  case addProductToCart
  case addShowToCalendar
  case checkoutCart
  case hideCart
  case hideChatOverlay
  case hideProductList
  case playerDidBecomeReady
  case playerDidClose
  case playerDidLoad
  case playerDidSwipeDown
  case playerDidSwipeLeft
  case playerDidSwipeRight
  case playerDidSwipeUp
  case provideProductData
  case shareShow
  case showCart
  case showChatOverlay
  case showProductList
  case showProductView
  case subscribe
  case syncCartState
  case unsubscribe
  case updateItemInCart
  case updateShowStatus
  public init?(rawValue: Swift.String)
  public typealias AllCases = [BambuserLiveVideoShoppingPlayer.PlayerEvent]
  public typealias RawValue = Swift.String
  public static var allCases: [BambuserLiveVideoShoppingPlayer.PlayerEvent] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public protocol ShowPresenter {
  var showId: Swift.String { get }
  func loadShow()
  func loadShow(_ showId: Swift.String)
}
@objc @_hasMissingDesignatedInitializers public class LiveVideoShoppingPlayerView : UIKit.UIView, BambuserLiveVideoShoppingPlayer.LiveVideoShoppingPlayerInterface {
  public init(showId: Swift.String, configuration: BambuserLiveVideoShoppingPlayer.PlayerConfiguration)
  @objc deinit
  final public let configuration: BambuserLiveVideoShoppingPlayer.PlayerConfiguration
  public var showId: Swift.String {
    get
  }
  public var showStatus: BambuserLiveVideoShoppingPlayer.ShowStatus {
    get
  }
  public var playerState: BambuserLiveVideoShoppingPlayer.PlayerState {
    get
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
}
extension LiveVideoShoppingPlayerView {
  public var isPictureInPictureActive: Swift.Bool {
    get
  }
  public func enterPictureInPicture()
  public func exitPictureInPicture()
}
extension LiveVideoShoppingPlayerView {
  public func hideUI()
  public func showUI()
}
extension LiveVideoShoppingPlayerView {
  public func loadShow()
  public func loadShow(_ showId: Swift.String)
}
extension LiveVideoShoppingPlayerView : WebKit.WKScriptMessageHandler {
  @objc dynamic public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
}
extension LiveVideoShoppingPlayerView : WebKit.WKNavigationDelegate {
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
}
extension PlayerConfiguration {
  public enum UIState : Swift.String, Swift.CaseIterable, Swift.Codable {
    case visible, hidden
    public init?(rawValue: Swift.String)
    public typealias AllCases = [BambuserLiveVideoShoppingPlayer.PlayerConfiguration.UIState]
    public typealias RawValue = Swift.String
    public static var allCases: [BambuserLiveVideoShoppingPlayer.PlayerConfiguration.UIState] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
public enum PlayerEngine {
  case standard
  case client(Swift.String)
  case custom(url: Swift.String)
}
extension PlayerConfiguration {
  public enum EnabledState : Swift.String, Swift.CaseIterable, Swift.Codable {
    case enabled, disabled
    public init?(rawValue: Swift.String)
    public typealias AllCases = [BambuserLiveVideoShoppingPlayer.PlayerConfiguration.EnabledState]
    public typealias RawValue = Swift.String
    public static var allCases: [BambuserLiveVideoShoppingPlayer.PlayerConfiguration.EnabledState] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
public protocol PlayerUIPresenter {
  func hideUI()
  func showUI()
}
public enum ShowStatus : Swift.String, Swift.CaseIterable, Swift.Codable {
  case loading
  case startingSoon
  case playingRecorded
  case playingLive
  case pausedByHost
  case ended
  case unknown
  public init?(rawValue: Swift.String)
  public typealias AllCases = [BambuserLiveVideoShoppingPlayer.ShowStatus]
  public typealias RawValue = Swift.String
  public static var allCases: [BambuserLiveVideoShoppingPlayer.ShowStatus] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension ShowStatus {
  public var isPlaying: Swift.Bool {
    get
  }
}
public struct PlayerConfiguration {
  public init(engine: BambuserLiveVideoShoppingPlayer.PlayerEngine = .standard, audioConfig: BambuserLiveVideoShoppingPlayer.AudioSessionConfiguration = .standard, buttonConfig: BambuserLiveVideoShoppingPlayer.PlayerConfiguration.ButtonConfiguration = .standard, isViewerSubscribed: Swift.Bool = false, localeInfo: BambuserLiveVideoShoppingPlayer.PlayerConfiguration.LocaleInfo = .standard, shareAutoplay: BambuserLiveVideoShoppingPlayer.PlayerConfiguration.EnabledState = .enabled, shareBaseUrl: Swift.String? = nil, streamerInfo: BambuserLiveVideoShoppingPlayer.PlayerConfiguration.StreamerInfo = .standard, uiConfig: BambuserLiveVideoShoppingPlayer.PlayerConfiguration.UIConfiguration = .standard, eventHandler: @escaping BambuserLiveVideoShoppingPlayer.PlayerConfiguration.EventHandler)
  public typealias EventHandler = (BambuserLiveVideoShoppingPlayer.PlayerEventInfo) -> Swift.Void
  public let audioConfig: BambuserLiveVideoShoppingPlayer.AudioSessionConfiguration
  public let buttonConfig: BambuserLiveVideoShoppingPlayer.PlayerConfiguration.ButtonConfiguration
  public let engine: BambuserLiveVideoShoppingPlayer.PlayerEngine
  public let eventHandler: BambuserLiveVideoShoppingPlayer.PlayerConfiguration.EventHandler
  public let isViewerSubscribed: Swift.Bool
  public let localeInfo: BambuserLiveVideoShoppingPlayer.PlayerConfiguration.LocaleInfo
  public let shareAutoplay: BambuserLiveVideoShoppingPlayer.PlayerConfiguration.EnabledState
  public let shareBaseUrl: Swift.String?
  public let streamerInfo: BambuserLiveVideoShoppingPlayer.PlayerConfiguration.StreamerInfo
  public let uiConfig: BambuserLiveVideoShoppingPlayer.PlayerConfiguration.UIConfiguration
}
@objc @_hasMissingDesignatedInitializers public class LiveVideoShoppingPlayerViewController : UIKit.UIViewController, BambuserLiveVideoShoppingPlayer.LiveVideoShoppingPlayerInterface {
  public init(showId: Swift.String, configuration: BambuserLiveVideoShoppingPlayer.PlayerConfiguration, modalTransitionStyle: UIKit.UIModalTransitionStyle? = nil, modalPresentationStyle: UIKit.UIModalPresentationStyle? = nil)
  final public let configuration: BambuserLiveVideoShoppingPlayer.PlayerConfiguration
  public var showId: Swift.String {
    get
  }
  @objc override dynamic public func loadView()
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc deinit
}
extension LiveVideoShoppingPlayerViewController {
  public var isPictureInPictureActive: Swift.Bool {
    get
  }
  public func enterPictureInPicture()
  public func exitPictureInPicture()
}
extension LiveVideoShoppingPlayerViewController {
  public func hideUI()
  public func showUI()
}
extension LiveVideoShoppingPlayerViewController {
  public func loadShow()
  public func loadShow(_ showId: Swift.String)
}
extension PlayerConfiguration {
  public struct UIConfiguration {
    public init(cartView: BambuserLiveVideoShoppingPlayer.PlayerConfiguration.UIState = .visible, cartButton: BambuserLiveVideoShoppingPlayer.PlayerConfiguration.UIState = .visible, chatOverlay: BambuserLiveVideoShoppingPlayer.PlayerConfiguration.UIState = .visible, productList: BambuserLiveVideoShoppingPlayer.PlayerConfiguration.UIState = .visible, productView: BambuserLiveVideoShoppingPlayer.PlayerConfiguration.UIState = .visible, shareButton: BambuserLiveVideoShoppingPlayer.PlayerConfiguration.UIState = .hidden, subscribeButton: BambuserLiveVideoShoppingPlayer.PlayerConfiguration.UIState = .hidden)
    public let cartView: BambuserLiveVideoShoppingPlayer.PlayerConfiguration.UIState
    public let cartButton: BambuserLiveVideoShoppingPlayer.PlayerConfiguration.UIState
    public let chatOverlay: BambuserLiveVideoShoppingPlayer.PlayerConfiguration.UIState
    public let productList: BambuserLiveVideoShoppingPlayer.PlayerConfiguration.UIState
    public let productView: BambuserLiveVideoShoppingPlayer.PlayerConfiguration.UIState
    public let shareButton: BambuserLiveVideoShoppingPlayer.PlayerConfiguration.UIState
    public let subscribeButton: BambuserLiveVideoShoppingPlayer.PlayerConfiguration.UIState
  }
}
extension PlayerConfiguration.UIConfiguration {
  public static var standard: BambuserLiveVideoShoppingPlayer.PlayerConfiguration.UIConfiguration {
    get
  }
}
extension BambuserLiveVideoShoppingPlayer.PlayerConfiguration.ButtonConfiguration.DismissConfig : Swift.Equatable {}
extension BambuserLiveVideoShoppingPlayer.PlayerConfiguration.ButtonConfiguration.DismissConfig : Swift.Hashable {}
extension BambuserLiveVideoShoppingPlayer.PlayerConfiguration.ButtonConfiguration.DismissConfig : Swift.RawRepresentable {}
extension BambuserLiveVideoShoppingPlayer.PlayerConfiguration.ButtonConfiguration.LinkConfig : Swift.Equatable {}
extension BambuserLiveVideoShoppingPlayer.PlayerConfiguration.ButtonConfiguration.LinkConfig : Swift.Hashable {}
extension BambuserLiveVideoShoppingPlayer.PlayerConfiguration.ButtonConfiguration.LinkConfig : Swift.RawRepresentable {}
extension BambuserLiveVideoShoppingPlayer.PlayerEvent : Swift.Equatable {}
extension BambuserLiveVideoShoppingPlayer.PlayerEvent : Swift.Hashable {}
extension BambuserLiveVideoShoppingPlayer.PlayerEvent : Swift.RawRepresentable {}
extension BambuserLiveVideoShoppingPlayer.PlayerState : Swift.Equatable {}
extension BambuserLiveVideoShoppingPlayer.PlayerState : Swift.Hashable {}
extension BambuserLiveVideoShoppingPlayer.PlayerState : Swift.RawRepresentable {}
extension BambuserLiveVideoShoppingPlayer.PlayerConfiguration.EnabledState : Swift.Equatable {}
extension BambuserLiveVideoShoppingPlayer.PlayerConfiguration.EnabledState : Swift.Hashable {}
extension BambuserLiveVideoShoppingPlayer.PlayerConfiguration.EnabledState : Swift.RawRepresentable {}
extension BambuserLiveVideoShoppingPlayer.PlayerConfiguration.UIState : Swift.Equatable {}
extension BambuserLiveVideoShoppingPlayer.PlayerConfiguration.UIState : Swift.Hashable {}
extension BambuserLiveVideoShoppingPlayer.PlayerConfiguration.UIState : Swift.RawRepresentable {}
extension BambuserLiveVideoShoppingPlayer.ShowStatus : Swift.Equatable {}
extension BambuserLiveVideoShoppingPlayer.ShowStatus : Swift.Hashable {}
extension BambuserLiveVideoShoppingPlayer.ShowStatus : Swift.RawRepresentable {}
